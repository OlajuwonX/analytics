name: Continuous Integration
# Trigger conditions: Run on push to main/develop branches and on pull requests
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Cancel in-progress runs of the same workflow on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch only the latest commit for faster checkout
          fetch-depth: 1

      # Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # Cache npm dependencies for faster subsequent runs
          cache: 'npm'

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Run ESLint to check code quality
      - name: Run ESLint
        run: npm run lint

      # Check code formatting with Prettier (optional)

  # Job 2: Type Checking
  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Run TypeScript compiler in check mode
      - name: Type check
        run: npx tsc --noEmit

  # Job 3: Unit Testing
  test:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Run unit tests with Vitest
      - name: Run unit tests
        run: npm run test:unit -- --run --coverage

  # Job 4: Build Verification
  build:
    name: Build Application
    runs-on: ubuntu-latest
    # Only run build after lint and typecheck pass
    needs: [lint, typecheck]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Set environment variables for build
      - name: Setup build environment
        run: |
          echo "NEXT_PUBLIC_API_URL=https://api.example.com" >> $GITHUB_ENV

      # Build the Next.js application
      - name: Build application
        run: npm run build

      # Cache the build output for E2E tests
      - name: Cache build output
        uses: actions/cache@v3
        with:
          path: .next
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}

  # Job 5: Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Restore cached build
      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: .next
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}

      # Run integration tests
      - name: Run integration tests
        run: npm run test:integration -- --run

  # Job 6: End-to-End Tests
  e2e-test:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Install Playwright browsers
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      # Restore cached build
      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: .next
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}

      # Run E2E tests
      - name: Run E2E tests
        run: npm run test:e2e

      # Upload test results and screenshots on failure
      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Job 7: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Audit dependencies for vulnerabilities
      - name: Run security audit
        run: npm audit --audit-level=high

      # Check for outdated dependencies (optional, doesn't fail build)
      - name: Check outdated packages
        run: npm outdated || true

  # Final job: All checks passed
  ci-success:
    name: CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test, build, integration-test, e2e-test, security]

    steps:
      - name: All checks passed
        run: echo "âœ… All CI checks passed successfully!"