name: Continuous Integration

# Trigger conditions: Run on push to main/develop branches and on pull requests
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Cancel in-progress runs of the same workflow on the same branch
# This prevents wasting CI minutes on outdated code
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Code Quality & Linting
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch only the latest commit for faster checkout
          fetch-depth: 1

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # Cache npm dependencies for faster subsequent runs
          cache: 'npm'

      # Step 3: Install dependencies
      # Using 'npm ci' instead of 'npm install' for:
      # - Faster, reliable, reproducible builds
      # - Uses package-lock.json exactly as-is
      # - Removes node_modules before install (clean slate)
      - name: Install dependencies
        run: npm ci

      # Step 4: Run ESLint to check code quality
      # This catches syntax errors, code smells, and style violations
      - name: Run ESLint
        run: npm run lint

      # Step 5: Check code formatting with Prettier (optional)
      # Uncomment if you're using Prettier in your project
      # - name: Check formatting
      #   run: npm run format:check

  # Job 2: Type Checking
  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Step 6: Run TypeScript compiler in check mode
      # This verifies all types are correct without emitting files
      # Catches type errors that could cause runtime issues
      - name: Type check
        run: npx tsc --noEmit

  # Job 3: Unit Testing
  test:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Step 7: Run unit tests with Vitest
      # - Tests run in single-threaded mode for CI stability
      # - Coverage reports are generated for quality metrics
      - name: Run unit tests
        run: npm run test:unit

      # Step 8: Upload coverage reports to Codecov (optional)
      # Uncomment if you want code coverage tracking
      # - name: Upload coverage
      #   uses: codecov/codecov-action@v3
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     files: ./coverage/coverage-final.json

  # Job 4: Build Verification
  build:
    name: Build Application
    runs-on: ubuntu-latest
    # Only run build after lint and typecheck pass
    needs: [lint, typecheck]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Step 9: Set environment variables for build
      # These mock values allow the build to succeed in CI
      - name: Setup build environment
        run: |
          echo "NEXT_PUBLIC_API_URL=https://api.example.com" >> $GITHUB_ENV

      # Step 10: Build the Next.js application
      # This ensures the code can be successfully built for production
      # Catches build-time errors before deployment
      - name: Build application
        run: npm run build

      # Step 11: Cache the build output for E2E tests
      # This saves time by reusing the build in the next job
      - name: Cache build output
        uses: actions/cache@v3
        with:
          path: .next
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}

  # Job 5: Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Step 12: Restore cached build
      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: .next
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}

      # Step 13: Run integration tests
      # These test component interactions and data flow
      - name: Run integration tests
        run: npm run test:integration -- --run

  # Job 6: End-to-End Tests
  e2e-test:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Step 14: Install Playwright browsers
      # This downloads Chromium, Firefox, and WebKit for testing
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      # Step 15: Restore cached build
      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: .next
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}

      # Step 16: Run E2E tests
      # These test the entire application flow from user perspective
      - name: Run E2E tests
        run: npm run test:e2e

      # Step 17: Upload test results and screenshots on failure
      # This helps debug failed tests in CI
      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Job 7: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Step 18: Audit dependencies for vulnerabilities
      # This checks for known security issues in npm packages
      # Using --audit-level=high to fail only on high/critical vulnerabilities
      - name: Run security audit
        run: npm audit --audit-level=high

      # Step 19: Check for outdated dependencies (optional, doesn't fail build)
      - name: Check outdated packages
        run: npm outdated || true

  # Final job: All checks passed
  ci-success:
    name: CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test, build, integration-test, e2e-test, security]

    steps:
      - name: All checks passed
        run: echo "âœ… All CI checks passed successfully!"