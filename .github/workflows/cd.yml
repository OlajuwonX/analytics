name: Continuous Deployment

# Only deploy when code is pushed to main branch
on:
  push:
    branches: [main]
  # Manual deployment trigger via GitHub UI
  workflow_dispatch:

# Prevent multiple deployments from running simultaneously
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel deployments, let them finish

jobs:
  # Job 1: Pre-deployment Verification
  verify:
    name: Pre-Deployment Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Quick smoke tests before deployment
      - name: Run critical tests
        run: npm run test:unit -- --run

      - name: Type check
        run: npx tsc --noEmit

      - name: Build verification
        run: npm run build
        env:
          # Use production environment variables
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NODE_ENV: production

  # Job 2: Deploy to Vercel Preview (for feature branches)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    # Only deploy previews for pull requests
    if: github.event_name == 'pull_request'
    needs: [verify]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Vercel CLI
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      # Pull Vercel environment information
      - name: Pull Vercel environment
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      # Build the project with Vercel
      - name: Build project
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      # Deploy to Vercel preview environment
      - name: Deploy to preview
        id: deploy-preview
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      # Step 5: Comment preview URL on PR
      - name: Comment preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ Preview deployment ready!\n\n**URL:** ${{ steps.deploy-preview.outputs.url }}\n\n_This preview will be available for 7 days._`
            })

  # Job 3: Deploy to Vercel Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    # Only deploy to production on main branch pushes
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [verify]
    environment:
      name: production
      url: https://ecom-analytics.vercel.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      # Pull production environment
      - name: Pull Vercel environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      # Build for production
      - name: Build project
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      # Deploy to production
      - name: Deploy to production
        id: deploy-prod
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      # Create deployment notification
      - name: Deployment success notification
        run: |
          echo "‚úÖ Deployment successful!"
          echo "üåê Production URL: ${{ steps.deploy-prod.outputs.url }}"

  # Job 4: Post-deployment Health Check
  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-production]

    steps:
      # Wait for deployment to be ready
      - name: Wait for deployment
        run: sleep 30

      # Check if the site is accessible
      - name: Health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://ecom-analytics.vercel.app)
          if [ $response -eq 200 ]; then
            echo "‚úÖ Health check passed (HTTP $response)"
          else
            echo "‚ùå Health check failed (HTTP $response)"
            exit 1
          fi

      

  # Job 5: Rollback on Failure (optional)
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [health-check]
    if: failure()

    steps:
    # Notify team of deployment failure
      - name: Deployment failed notification
        run: |
          echo "‚ùå Deployment failed! Health checks did not pass."
          echo "üîÑ Consider rolling back to previous version."